test = "wilcox.test", textsize = 5,
map_signif_level = function(p) {if(p < 0.01) {p = "**"} else if(p < 0.05) {p = "*"} else {p = "NS"}},
test.args = list(exact = FALSE, correct = FALSE, conf.int = TRUE, conf.level = 0.95),
step_increase = 0.1) +
geom_signif(data = subset(all_comb, dataset == "Cohort B"),
comparisons = list(c("Caries", "ConfidentH")),
test = "wilcox.test", textsize = 5,
map_signif_level = function(p) {if(p < 0.01) {p = "**"} else if(p < 0.05) {p = "*"} else {p = "NS"}},
test.args = list(exact = FALSE, correct = FALSE, conf.int = TRUE, conf.level = 0.95),
step_increase = 0.1) +
ylab("sMiC")+ xlab("Actual status of tooth")+
ylim(c(0, 1))+
geom_hline(yintercept=0.5, linetype="dashed")+
theme_bw()+
theme(axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
strip.text = element_text(size = 14),
strip.background = element_rect(colour = "white"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 14),
legend.position = "none")
p
ggsave(filename=paste(outpath,"vld_Pred_in_",c_category, "_among_", s_category,".boxplot.pdf",sep=""),plot=p, width=3.4, height=3.4)
p<-ggplot(all_comb, aes(x=y, y=Caries)) +
geom_boxplot(outlier.shape = NA) +
scale_colour_manual(values = viridis(4)[c(1, 2, 4)], name = "Future_Status_Tooth") +
facet_wrap(~dataset, scales="free_x")+
geom_jitter(aes(color=y), position=position_jitterdodge(jitter.width= 0.2,dodge.width = 0.8),size=1,alpha=0.4) +
geom_signif(data = subset(all_comb, dataset == "Cohort A"),
comparisons = list(c("ConfidentH", "C_H"), c("Caries", "C_H"),
c("ConfidentH", "Caries")),
test = "wilcox.test", textsize = 5,
map_signif_level = function(p) {if(p < 0.01) {p = "**"} else if(p < 0.05) {p = "*"} else {p = "NS"}},
test.args = list(exact = FALSE, correct = FALSE, conf.int = TRUE, conf.level = 0.95),
step_increase = 0.3) +
geom_signif(data = subset(all_comb, dataset == "Cohort B"),
comparisons = list(c("Caries", "ConfidentH")),
test = "wilcox.test", textsize = 5,
map_signif_level = function(p) {if(p < 0.01) {p = "**"} else if(p < 0.05) {p = "*"} else {p = "NS"}},
test.args = list(exact = FALSE, correct = FALSE, conf.int = TRUE, conf.level = 0.95),
step_increase = 0.3) +
ylab("sMiC")+ xlab("Actual status of tooth")+
ylim(c(0, 1.2))+
geom_hline(yintercept=0.5, linetype="dashed")+
theme_bw()+
theme(axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
strip.text = element_text(size = 14),
strip.background = element_rect(colour = "white"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 14),
legend.position = "none")
p
ggsave(filename=paste(outpath,"vld_Pred_in_",c_category, "_among_", s_category,".boxplot.pdf",sep=""),plot=p, width=3.4, height=3.4)
p<-ggplot(all_comb, aes(x=y, y=Caries)) +
geom_boxplot(outlier.shape = NA) +
scale_colour_manual(values = viridis(4)[c(1, 2, 4)], name = "Future_Status_Tooth") +
facet_wrap(~dataset, scales="free_x")+
geom_jitter(aes(color=y), position=position_jitterdodge(jitter.width= 0.2,dodge.width = 0.8),size=1,alpha=0.4) +
geom_signif(data = subset(all_comb, dataset == "Cohort A"),
comparisons = list(c("ConfidentH", "C_H"), c("Caries", "C_H"),
c("ConfidentH", "Caries")),
test = "wilcox.test", textsize = 5,
map_signif_level = function(p) {if(p < 0.01) {p = "**"} else if(p < 0.05) {p = "*"} else {p = "NS"}},
test.args = list(exact = FALSE, correct = FALSE, conf.int = TRUE, conf.level = 0.95),
step_increase = 0.3) +
geom_signif(data = subset(all_comb, dataset == "Cohort B"),
comparisons = list(c("Caries", "ConfidentH")),
test = "wilcox.test", textsize = 5,
map_signif_level = function(p) {if(p < 0.01) {p = "**"} else if(p < 0.05) {p = "*"} else {p = "NS"}},
test.args = list(exact = FALSE, correct = FALSE, conf.int = TRUE, conf.level = 0.95),
step_increase = 0.3) +
ylab("sMiC")+ xlab("Actual status of tooth")+
ylim(c(0, 1.4))+
geom_hline(yintercept=0.5, linetype="dashed")+
theme_bw()+
theme(axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
strip.text = element_text(size = 14),
strip.background = element_rect(colour = "white"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 14),
legend.position = "none")
p
ggsave(filename=paste(outpath,"vld_Pred_in_",c_category, "_among_", s_category,".boxplot.pdf",sep=""),plot=p, width=3.4, height=3.4)
p<-ggplot(all_comb, aes(x=y, y=Caries)) +
geom_boxplot(outlier.shape = NA) +
scale_colour_manual(values = viridis(4)[c(1, 2, 4)], name = "Future_Status_Tooth") +
facet_wrap(~dataset, scales="free_x")+
geom_jitter(aes(color=y), position=position_jitterdodge(jitter.width= 0.2,dodge.width = 0.8),size=1,alpha=0.4) +
geom_signif(data = subset(all_comb, dataset == "Cohort A"),
comparisons = list(c("ConfidentH", "C_H"), c("Caries", "C_H"),
c("ConfidentH", "Caries")),
test = "wilcox.test", textsize = 5,
map_signif_level = function(p) {if(p < 0.01) {p = "**"} else if(p < 0.05) {p = "*"} else {p = "NS"}},
test.args = list(exact = FALSE, correct = FALSE, conf.int = TRUE, conf.level = 0.95),
step_increase = 0.3) +
geom_signif(data = subset(all_comb, dataset == "Cohort B"),
comparisons = list(c("Caries", "ConfidentH")),
test = "wilcox.test", textsize = 5,
map_signif_level = function(p) {if(p < 0.01) {p = "**"} else if(p < 0.05) {p = "*"} else {p = "NS"}},
test.args = list(exact = FALSE, correct = FALSE, conf.int = TRUE, conf.level = 0.95),
step_increase = 0.3) +
ylab("sMiC")+ xlab("Actual status of tooth")+
ylim(c(0, 1.3))+
geom_hline(yintercept=0.5, linetype="dashed")+
theme_bw()+
theme(axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
strip.text = element_text(size = 14),
strip.background = element_rect(colour = "white"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 14),
legend.position = "none")
p
ggsave(filename=paste(outpath,"vld_Pred_in_",c_category, "_among_", s_category,".boxplot.pdf",sep=""),plot=p, width=3.4, height=3.4)
p<-ggplot(all_comb, aes(x=y, y=Caries)) +
geom_boxplot(outlier.shape = NA) +
scale_colour_manual(values = viridis(4)[c(1, 2, 4)], name = "Future_Status_Tooth") +
facet_wrap(~dataset, scales="free_x")+
geom_jitter(aes(color=y), position=position_jitterdodge(jitter.width= 0.2,dodge.width = 0.8),size=1,alpha=0.4) +
geom_signif(data = subset(all_comb, dataset == "Cohort A"),
comparisons = list(c("ConfidentH", "C_H"), c("Caries", "C_H"),
c("ConfidentH", "Caries")),
test = "wilcox.test", textsize = 5,
map_signif_level = function(p) {if(p < 0.01) {p = "**"} else if(p < 0.05) {p = "*"} else {p = "NS"}},
test.args = list(exact = FALSE, correct = FALSE, conf.int = TRUE, conf.level = 0.95),
step_increase = 0.3) +
geom_signif(data = subset(all_comb, dataset == "Cohort B"),
comparisons = list(c("Caries", "ConfidentH")),
test = "wilcox.test", textsize = 5,
map_signif_level = function(p) {if(p < 0.01) {p = "**"} else if(p < 0.05) {p = "*"} else {p = "NS"}},
test.args = list(exact = FALSE, correct = FALSE, conf.int = TRUE, conf.level = 0.95),
step_increase = 0.3) +
ylab("sMiC")+ xlab("Actual status of tooth")+
ylim(c(0, 1.5))+
geom_hline(yintercept=0.5, linetype="dashed")+
theme_bw()+
theme(axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
strip.text = element_text(size = 14),
strip.background = element_rect(colour = "white"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 14),
legend.position = "none")
p
ggsave(filename=paste(outpath,"vld_Pred_in_",c_category, "_among_", s_category,".boxplot.pdf",sep=""),plot=p, width=3.4, height=3.4)
p<-ggplot(all_comb, aes(x=y, y=Caries)) +
geom_boxplot(outlier.shape = NA) +
scale_colour_manual(values = viridis(4)[c(1, 2, 4)], name = "Future_Status_Tooth") +
facet_wrap(~dataset, scales="free_x")+
geom_jitter(aes(color=y), position=position_jitterdodge(jitter.width= 0.2,dodge.width = 0.8),size=1,alpha=0.4) +
geom_signif(data = subset(all_comb, dataset == "Cohort A"),
comparisons = list(c("ConfidentH", "C_H"), c("Caries", "C_H"),
c("ConfidentH", "Caries")),
test = "wilcox.test", textsize = 5,
map_signif_level = function(p) {if(p < 0.01) {p = "**"} else if(p < 0.05) {p = "*"} else {p = "NS"}},
test.args = list(exact = FALSE, correct = FALSE, conf.int = TRUE, conf.level = 0.95),
step_increase = 0.3) +
geom_signif(data = subset(all_comb, dataset == "Cohort B"),
comparisons = list(c("Caries", "ConfidentH")),
test = "wilcox.test", textsize = 5,
map_signif_level = function(p) {if(p < 0.01) {p = "**"} else if(p < 0.05) {p = "*"} else {p = "NS"}},
test.args = list(exact = FALSE, correct = FALSE, conf.int = TRUE, conf.level = 0.95),
step_increase = 0.3) +
ylab("sMiC")+ xlab("Actual status of tooth")+
ylim(c(0, 1.4))+
geom_hline(yintercept=0.5, linetype="dashed")+
theme_bw()+
theme(axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
strip.text = element_text(size = 14),
strip.background = element_rect(colour = "white"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 14),
legend.position = "none")
p
ggsave(filename=paste(outpath,"vld_Pred_in_",c_category, "_among_", s_category,".boxplot.pdf",sep=""),plot=p, width=3.4, height=3.4)
# AUROC计算
# AUROC计算
AUROC <- function(df, outfile, label) {
rocobj <- roc(df$y, df$Caries, smooth = F)       # 曲线是否光滑，当光滑时，无法计算置信区间
# 计算AUROC值
auc<-auc(rocobj)[1]
# AUROC的置信区间
auc_low<-ci(rocobj,of="auc")[1]
auc_high<-ci(rocobj,of="auc")[3]
print(auc)
print(auc_low)
print(auc_high)
# 计算最佳临界值（Youden指数）
coords <- coords(rocobj, "best", ret="threshold")
best_cutoff <- coords[1]
sensitivity <- coords[2]
specificity <- coords[3]
# 计算置信区间
ciobj <- ci.se(rocobj,specificities=seq(0, 1, 0.01))
data_ci<-ciobj[1:101,1:3]
data_ci<-as.data.frame(data_ci)
x=as.numeric(rownames(data_ci))
data_ci<-data.frame(x,data_ci)
# 绘图
plot <- ggroc(rocobj,
color="red",
size=1,
legacy.axes = F # FALSE时 横坐标为1-0 specificity；TRUE时 横坐标为0-1 1-specificity
) +
geom_point(aes(x = 1 - specificity, y = sensitivity), color="blue") +
geom_text(aes(x = 1 - specificity, y = sensitivity, label = paste("Cutoff:", best_cutoff)), hjust = -0.2, vjust = 1.5) +
theme_classic()+
theme(axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
strip.text = element_text(size = 15),
strip.background = element_rect(colour = "white"),
legend.title = element_text(size = 15),
legend.text = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
legend.position = "none") +
geom_segment(aes(x = 1, y = 0, xend = 0, yend = 1),        # 绘制对角线
colour='grey',
linetype = 'dotdash'
) +
geom_ribbon(data = data_ci,                                # 绘制置信区间
aes(x=x, ymin=X2.5., ymax=X97.5.),               # 当legacy.axes=TRUE时， 把x=x改为x=1-x
fill = 'lightblue',
alpha=0.5) +
geom_text(aes(x = 0.3, y = 0.2, label = paste0("AUROC = ", round(auc, 2), "\n", label)), size = 6)
ggsave(filename=paste0(outfile, ".pdf"), plot=plot, width=3.5, height=3.5)
positions <- unique(df$Position2)
auc <- matrix(0, nrow = length(positions), ncol = 1)
auc <- as.data.frame(auc)
rownames(auc) <- positions
colnames(auc) <- "AUROC"
for(pos in positions) {
data <- df[which(df$Position2 == pos), ]
x <- data$y
y <- data$Caries
# rocobj <- roc(x, y, smooth = F)
# auc[pos, 1] <- auc(rocobj)[1])
auc[pos, 1] <- cal_auc_by_position(x, y)
}
print(auc)
write.table(auc, paste0(outfile, "_by_position.xls"), sep = "\t", quote = F, row.names = T, col.names = NA)
auc$position <- rownames(auc)
auc$feature <- paste("AUROC", label, sep = "\n")
p_AUROC<-ggplot(auc, aes(x=as.factor(position), y=as.factor(feature))) +
xlab("Tooth Position") +
geom_tile(aes(fill = AUROC, width=0.9, height=0.9), size=6) +
labs(names = "AUROC") +
scale_color_manual(values=c("white","grey80"))+
geom_text(aes(label = round(AUROC, 2)), size = 10, color = "white") +
scale_fill_viridis(limit = c(0.5, 1))+
theme_bw() + theme_classic() +
theme(axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text = element_text(size = 14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
strip.text = element_text(size = 14),
strip.background = element_rect(colour = "white"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
plot.title = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.title.y = element_blank(),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
legend.position = "right")
p_AUROC
ggsave(filename=paste0(outfile, "_by_position.heatmap.pdf"),plot=p_AUROC, width=12, height=2)
}
# 读取ROC数据文件
df = read.table(paste0(outpath, "/RF_pred_summ.xls"), sep = "\t", header = T, row.names = 1)
df_composition <- table(df[, c("y", "Position2")])
write.table(df_composition, paste0(outpath, "/df_composition.txt"),  sep = "\t", quote = F, row.names = T, col.names = NA)
HHRH_df <- subset(df, y %in% c("ConfidentH", "RelativeH"))
AUROC(HHRH_df, paste0(outpath, "/taxonomy_HHRH_RF_pred_summ_ROC"), "(ConfidentH\nVS\nRelativeH)")
HHCC_df <- subset(df, y %in% c("ConfidentH", "Caries"))
# 读取ROC数据文件
df = read.table(paste0(outpath, "/RF_pred_summ.xls"), sep = "\t", header = T, row.names = 1)
df_composition <- table(df[, c("y", "Position2")])
write.table(df_composition, paste0(outpath, "/df_composition.txt"),  sep = "\t", quote = F, row.names = T, col.names = NA)
HHRH_df <- subset(df, y %in% c("ConfidentH", "RelativeH"))
df <- HHRH_df
rocobj <- roc(df$y, df$Caries, smooth = F)       # 曲线是否光滑，当光滑时，无法计算置信区间
# 计算AUROC值
auc<-auc(rocobj)[1]
# AUROC的置信区间
auc_low<-ci(rocobj,of="auc")[1]
auc_high<-ci(rocobj,of="auc")[3]
print(auc)
print(auc_low)
print(auc_high)
# 计算最佳临界值（Youden指数）
coords <- coords(rocobj, "best", ret="threshold")
best_cutoff <- coords[1]
sensitivity <- coords[2]
coords
coords
coords(rocobj)
coords <- coords(rocobj, "best", ret="threshold")
rocobj
rocobj <- roc(df$y, df$Caries, smooth = F)       # 曲线是否光滑，当光滑时，无法计算置信区间
rocobj
# 计算AUROC值
auc<-auc(rocobj)[1]
auc
df
# 读取ROC数据文件
df = read.table(paste0(outpath, "/RF_pred_summ.xls"), sep = "\t", header = T, row.names = 1)
df_composition <- table(df[, c("y", "Position2")])
write.table(df_composition, paste0(outpath, "/df_composition.txt"),  sep = "\t", quote = F, row.names = T, col.names = NA)
HHRH_df <- subset(df, y %in% c("ConfidentH", "RelativeH"))
df <- HHRH_df
df
# 读取ROC数据文件
df = read.table(paste0(outpath, "/RF_pred_summ.xls"), sep = "\t", header = T, row.names = 1)
df
paste0(outpath, "/RF_pred_summ.xls")
dev.off()
df
paste0(outpath, "/RF_pred_summ.xls")
outpath
## install and load necessary libraries for data analyses
#-------------------------------
p <- c("reshape2","ggplot2","pheatmap","combinat","randomForest", "gridExtra", "crossRanger", "RColorBrewer",
"vegan", "biomformat", "doMC", "cowplot", "pROC", "ggsignif", "ggpubr")
usePackage <- function(p) {
if (!is.element(p, installed.packages()[,1]))
install.packages(p, dep=TRUE, repos="https://cloud.r-project.org/")
suppressWarnings(suppressMessages(invisible(require(p, character.only=TRUE))))
}
invisible(lapply(p, usePackage))
#-------------------------------
## input args
#-------------------------------
rf.opts<-list(outdir=NA, ntree=5000, verbose=FALSE, nfolds=10)
#source("ranger_util_20190520.R")
source("../../data_trimming_util.R")
#-------------------------------
datafile <- "../../../data/1867/taxonomy/ML_features_table/1867_taxonomy_feature_table.biom"
sample_metadata <- "../../../data/1867/taxonomy/1867_taxonomy_metadata.tsv"
feature_metadata <- "../../../data/1867/taxonomy/ML_features_table/1867_taxonomy_feature_taxon.txt"
prefix_name<-"taxonomy"
s_category<-"Position2"
c_category<-"Future_Status_Tooth"
AddTaxonomy=TRUE
p_cutoff=0.05
q_cutoff=0.05
p.adj.method="BH"
h=10
outpath <- paste("../../../Results/Figure_6/sMiC/",prefix_name,"_Position_crossRF_out/", sep="")
dir.create(outpath, recursive = T)
# AUROC计算
AUROC <- function(df, outfile, label) {
rocobj <- roc(df$y, df$Caries, smooth = F)       # 曲线是否光滑，当光滑时，无法计算置信区间
# 计算AUROC值
auc<-auc(rocobj)[1]
# AUROC的置信区间
auc_low<-ci(rocobj,of="auc")[1]
auc_high<-ci(rocobj,of="auc")[3]
print(auc)
print(auc_low)
print(auc_high)
# 计算最佳临界值（Youden指数）
coords <- coords(rocobj, "best", ret="threshold")
best_cutoff <- coords[1]
sensitivity <- coords[2]
specificity <- coords[3]
# 计算置信区间
ciobj <- ci.se(rocobj,specificities=seq(0, 1, 0.01))
data_ci<-ciobj[1:101,1:3]
data_ci<-as.data.frame(data_ci)
x=as.numeric(rownames(data_ci))
data_ci<-data.frame(x,data_ci)
# 绘图
plot <- ggroc(rocobj,
color="red",
size=1,
legacy.axes = F # FALSE时 横坐标为1-0 specificity；TRUE时 横坐标为0-1 1-specificity
) +
geom_point(aes(x = 1 - specificity, y = sensitivity), color="blue") +
geom_text(aes(x = 1 - specificity, y = sensitivity, label = paste("Cutoff:", best_cutoff)), hjust = -0.2, vjust = 1.5) +
theme_classic()+
theme(axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
strip.text = element_text(size = 15),
strip.background = element_rect(colour = "white"),
legend.title = element_text(size = 15),
legend.text = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
legend.position = "none") +
geom_segment(aes(x = 1, y = 0, xend = 0, yend = 1),        # 绘制对角线
colour='grey',
linetype = 'dotdash'
) +
geom_ribbon(data = data_ci,                                # 绘制置信区间
aes(x=x, ymin=X2.5., ymax=X97.5.),               # 当legacy.axes=TRUE时， 把x=x改为x=1-x
fill = 'lightblue',
alpha=0.5) +
geom_text(aes(x = 0.3, y = 0.2, label = paste0("AUROC = ", round(auc, 2), "\n", label)), size = 6)
ggsave(filename=paste0(outfile, ".pdf"), plot=plot, width=3.5, height=3.5)
positions <- unique(df$Position2)
auc <- matrix(0, nrow = length(positions), ncol = 1)
auc <- as.data.frame(auc)
rownames(auc) <- positions
colnames(auc) <- "AUROC"
for(pos in positions) {
data <- df[which(df$Position2 == pos), ]
x <- data$y
y <- data$Caries
# rocobj <- roc(x, y, smooth = F)
# auc[pos, 1] <- auc(rocobj)[1])
auc[pos, 1] <- cal_auc_by_position(x, y)
}
print(auc)
write.table(auc, paste0(outfile, "_by_position.xls"), sep = "\t", quote = F, row.names = T, col.names = NA)
auc$position <- rownames(auc)
auc$feature <- paste("AUROC", label, sep = "\n")
p_AUROC<-ggplot(auc, aes(x=as.factor(position), y=as.factor(feature))) +
xlab("Tooth Position") +
geom_tile(aes(fill = AUROC, width=0.9, height=0.9), size=6) +
labs(names = "AUROC") +
scale_color_manual(values=c("white","grey80"))+
geom_text(aes(label = round(AUROC, 2)), size = 10, color = "white") +
scale_fill_viridis(limit = c(0.5, 1))+
theme_bw() + theme_classic() +
theme(axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text = element_text(size = 14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
strip.text = element_text(size = 14),
strip.background = element_rect(colour = "white"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
plot.title = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.title.y = element_blank(),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
legend.position = "right")
p_AUROC
ggsave(filename=paste0(outfile, "_by_position.heatmap.pdf"),plot=p_AUROC, width=12, height=2)
}
# 读取ROC数据文件
df = read.table(paste0(outpath, "/RF_pred_summ.xls"), sep = "\t", header = T, row.names = 1)
df_composition <- table(df[, c("y", "Position2")])
write.table(df_composition, paste0(outpath, "/df_composition.txt"),  sep = "\t", quote = F, row.names = T, col.names = NA)
HHRH_df <- subset(df, y %in% c("ConfidentH", "RelativeH"))
AUROC(HHRH_df, paste0(outpath, "/taxonomy_HHRH_RF_pred_summ_ROC"), "(ConfidentH\nVS\nRelativeH)")
HHRH_df
nrow(HHRH_df)
print("hello")
